// package main
/*

Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

22=4, 23=8, 24=16, 25=32
32=9, 33=27, 34=81, 35=243
42=16, 43=64, 44=256, 45=1024
52=25, 53=125, 54=625, 55=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

*/

package main

import (
	"fmt"
	"math"
	"sort"
)

type input = struct{ mina, maxa, minb, maxb int }
type answer = int

// Run run
func Run(in input) answer {
	fmt.Printf("%v ≤ a ≤ %v and %v ≤ b ≤ %v\n", in.mina, in.maxa, in.minb, in.maxb)
	values := getValues(in.mina, in.maxa, in.minb, in.maxb)
	answer := len(values)
	fmt.Println(answer)
	return len(values)
}

func getValues(mina, maxa, minb, maxb int) []int {

	// record all unique values
	valueMap := make(map[int]bool)
	for a := mina; a <= maxa; a++ {
		for b := minb; b <= maxb; b++ {
			value := int(math.Pow(float64(a), float64(b)))
			valueMap[value] = true
		}
	}

	// convert to list (don't really need this for the problem... but is nice to look at)
	values := make([]int, 0, len(valueMap))
	for key := range valueMap {
		values = append(values, key)
	}

	sort.Ints(values)
	fmt.Println(values)

	return values

}

func main() {
	fmt.Println(Run(input{2, 5, 2, 5}))
}
